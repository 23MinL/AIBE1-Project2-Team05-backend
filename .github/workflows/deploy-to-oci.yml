name: Deploy to Docker Hub

on:
  push:
    branches: [ main ]
  workflow_dispatch: # 수동 실행 옵션

env:
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/linkup-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # 🔽 GitHub Packages‧소스 읽기 권한 선언
    permissions:
      packages: read     # GitHub Packages(PKG) 다운로드
      contents: read     # 리포지토리 checkout

    steps:
      # 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Gradle 빌드 (테스트 스킵)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자 이름
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 패스워드 (액세스 토큰 사용 권장)

      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REPO }}:${{ github.sha }},${{ env.DOCKER_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 서버에 SSH로 접속하여 컨테이너 업데이트
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}  # 서버 주소
          username: ${{ secrets.SERVER_SSH_USERNAME }}  # SSH 사용자명
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}  # SSH 개인 키
          port: ${{ secrets.SERVER_SSH_PORT }}  # SSH 포트
          script: |
            sudo usermod -aG docker ${{ secrets.SERVER_SSH_USERNAME }}
            docker stop app-container || true
            echo "기존 컨테이너 중지 시도 완료"

            docker rm app-container || true
            echo "기존 컨테이너 제거 시도 완료"          
            
            docker pull ${{ env.DOCKER_REPO }}:latest
            echo "Docker 이미지 풀링 완료"
            
            docker run -d \
              --name app-container \
              -p 8443:8443 \
              -e JWT_SECRET="${{secrets.JWT_SECRET}}" \
              -e SPRING_DATASOURCE_URL="${{secrets.MYSQL_URL}}" \
              -e SPRING_DATASOURCE_USERNAME="${{secrets.MYSQL_USER}}" \
              -e SPRING_DATASOURCE_PASSWORD="${{secrets.MYSQL_PASSWORD}}" \
              -e GOOGLE_CLIENT_ID="${{secrets.GOOGLE_CLIENT_ID}}" \
              -e GOOGLE_CLIENT_SECRET="${{secrets.GOOGLE_CLIENT_SECRET}}" \
              -e KAKAO_CLIENT_ID="${{secrets.KAKAO_CLIENT_ID}}" \
              -e KAKAO_CLIENT_SECRET="${{secrets.KAKAO_CLIENT_SECRET}}" \
              -e NAVER_CLIENT_ID="${{secrets.NAVER_CLIENT_ID}}" \
              -e NAVER_CLIENT_SECRET="${{secrets.NAVER_CLIENT_SECRET}}" \
              -e SPRING_PROFILES_ACTIVE="${{secrets.SPRING_PROFILES_ACTIVE}}" \
              -e GEMINI_API_KEY="${{secrets.GEMINI_API_KEY}}" \
              -e SERVER_PORT="${{secrets.PORT}}" \
              ${{ env.DOCKER_REPO }}:latest
            
            echo "새 컨테이너 실행 시도 완료"
            
            # 사용하지 않는 이미지 정리
            docker image prune -f
            echo "사용하지 않는 이미지 정리 완료"