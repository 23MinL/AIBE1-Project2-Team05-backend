name: Deploy to Docker Hub

on:
  push:
    branches: [ feat/cicd ] # 브랜치에 푸시될 때 실행
  workflow_dispatch: # 수동 실행 옵션

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Gradle 빌드 (테스트 스킵)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자 이름
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 패스워드 (액세스 토큰 사용 권장)

      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my-repo:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/my-repo:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 서버에 SSH로 접속하여 컨테이너 업데이트
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}  # 서버 주소
          username: ${{ secrets.SERVER_SSH_USERNAME }}  # SSH 사용자명
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}  # SSH 개인 키
          port: ${{ secrets.SERVER_SSH_PORT }}  # SSH 포트
          script: |
            sudo usermod -aG docker ${{ secrets.SERVER_SSH_USERNAME }}
            # 기존 컨테이너 중지 및 제거
            docker stop app-container || true
            echo "기존 컨테이너 중지 시도 완료"

            docker rm app-container || true
            echo "기존 컨테이너 제거 시도 완료"          
            
            # Docker Hub에서 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-repo:latest
            echo "Docker 이미지 풀링 완료"
            
            # 새 컨테이너 실행
            docker run -d \
              --name app-container \
              -p 8080:8080 \
              euegenechoi/my-repo:latest
            echo "새 컨테이너 실행 시도 완료"
            
            # 사용하지 않는 이미지 정리
            docker image prune -f
            echo "사용하지 않는 이미지 정리 완료"
